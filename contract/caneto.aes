contract CanetoAE =
  
  //Payrent data 
  record payrent =
    { tenantAddress : address,
      firstname    : string,
      surname      : string,
      amount       : int, 
      mobile       : int,
      email        : string,
      apartment    : string
    }
      
  record state =
    { payrents       : map(int, payrent),
      payrentsLength : int }
      
  entrypoint init() =
    { payrents = {},
      payrentsLength = 0 }

   // get meeting by id
  entrypoint getPayrent(payrentId: int) : payrent = 
    state.payrents[payrentId]
      
  entrypoint getPayrents(index : int) : payrent =
    switch(Map.lookup(index, state.payrents))
      None    => abort("There was no rent paid.")
      Some(x) => x
      
  payable stateful entrypoint registerPayrent(firstname' : string, surname' : string, amount' : int, mobile' : int,
                                              email' : string, apartment': string) =
                                              
    // validate if has money to pay
    let amount = amount'
    
    if (Call.value < amount) 
      abort("Amount too small, rent not paid")
    else("You have done well")
    
    Chain.spend(ak_2bKhoFWgQ9os4x8CaeDTHZRGzUcSwcXYUrM12gZHKTdyreGRgG,Call.value)
    let payrent = { tenantAddress = Call.caller, firstname = firstname',
                                                surname   = surname',
                                                amount    = amount',
                                                mobile    = mobile',
                                                email     = email',
                                                apartment = apartment'
                  }
    let index = getPayrentsLength() + 1
    put(state{ payrents[index] = payrent, payrentsLength = index })
    
  entrypoint getPayrentsLength() : int =
    state.payrentsLength
